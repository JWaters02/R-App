gdp_quarterly_extremes <- function() {
min <- head(gdp_quarterly_data(), 1)
max <- tail(gdp_quarterly_data(), 1)
return(bind_rows(min, max))
}
print(gdp_quarterly_extremes())
runApp()
# Generates a vector of strings of the data sets in total_df
get_loaded_datasets <- function() {
datasets <- select(total_df, SeriesName)
}
# Generates a vector of strings of the data sets in total_df
get_loaded_datasets <- function() {
datasets <- select(total_df, SeriesName)
return(distinct(datasets))
}
print(get_loaded_datasets())
# Generates a vector of strings of the data sets in total_df
get_loaded_datasets <- function() {
datasets <- distinct(select(total_df, SeriesName))
return(datasets)
}
print(get_loaded_datasets())
# Generates a vector of strings of the data sets in total_df
get_loaded_datasets <- function() {
datasets <- distinct(select(total_df, SeriesName))
for (set in datasets) {
append(set, toString(sets))
}
return(datasets)
}
get_loaded_datasets()
# Generates a vector of strings of the data sets in total_df
get_loaded_datasets <- function() {
datasets_df <- distinct(select(total_df, SeriesName))
for (set in datasets_df) {
append(dataset, toString(sets))
}
return(datasets)
}
get_loaded_datasets()
# Generates a vector of strings of the data sets in total_df
get_loaded_datasets <- function() {
datasets_df <- distinct(select(total_df, SeriesName))
dataset <- c()
for (set in datasets_df) {
append(dataset, toString(sets))
}
return(datasets)
}
get_loaded_datasets()
# Generates a vector of strings of the data sets in total_df
get_loaded_datasets <- function() {
datasets_df <- distinct(select(total_df, SeriesName))
dataset <- c()
for (set in datasets_df) {
append(dataset, toString(set))
}
return(datasets)
}
get_loaded_datasets()
# Generates a vector of strings of the data sets in total_df
get_loaded_datasets <- function() {
datasets_df <- distinct(select(total_df, SeriesName))
dataset <- c()
for (set in datasets_df) {
append(dataset, toString(set))
}
return(dataset)
}
get_loaded_datasets()
print(get_loaded_datasets())
# Generates a vector of strings of the data sets in total_df
get_loaded_datasets <- function() {
datasets_df <- distinct(select(total_df, SeriesName))
dataset <- datasets_df[,1]
return(dataset)
}
print(get_loaded_datasets())
print(get_loaded_datasets()[,1])
print(get_loaded_datasets()[1])
print(get_loaded_datasets()[2])
print(get_loaded_datasets()[3])
source("src/unemployment_data.R")
install.packages("languageserver")
View(total_df)
View(total_df)
# Generates a vector of strings of the data sets in total_df
get_loaded_datasets <- function() {
datasets_df <- distinct(select(total_df, SeriesName))
dataset <- datasets_df[,1]
return(dataset)
}
get_loaded_datasets()
datasets_df <- distinct(select(total_df, SeriesName))
View(datasets_df)
dataset_df <- filter(total_df, seriesName)
dataset_df <- filter(total_df, SeriesName == seriesName)
get_frequency_types <- function(seriesName) {
dataset_df <- filter(total_df, SeriesName == seriesName)
frequency_types <- distinct(select(total_df), Frequency)
}
dataset_df <- filter(total_df, SeriesName == 'GDP')
View(dataset_df)
get_frequency_types <- function(seriesName) {
datasets_df <- filter(total_df, SeriesName == 'GDP')
frequency_types <- distinct(select(datasets_df, Frequency))
}
View(datasets_df)
get_frequency_types <- function(seriesName) {
data_df <- filter(total_df, SeriesName == 'GDP')
frequency_types <- distinct(select(data_df, Frequency))
frequency_types <- frequency_types[,1]
return(frequency_types)
}
# Load libraries
library(stringr)
library(tidyverse)
library(scales)
# Load functions
source("src/functions.R")
# Load GDP data
gdp_df <- read.csv(file = './data/GDP (seasonally adjusted).csv', header = TRUE)
gdp_source <- 'https://www.ons.gov.uk/economy/grossdomesticproductgdp/timeseries/abmi/pn2'
colnames(gdp_df) <- c('DateChar', 'GDP')
gdp_df2 = gdp_df %>%
mutate(SeriesName = 'GDP') %>%
mutate(Frequency = ifelse(str_detect(DateChar, 'Q') == TRUE,'Quarter', 'Annual')) %>%
mutate(Value = GDP) %>%
mutate(Date = case_when(
Frequency == 'Quarter' ~ convert_quarterly_dates(DateChar),
Frequency == 'Annual'  ~ as.POSIXlt(as.Date(paste0(DateChar, '-12-31'), "%Y-%m-%d", "GMT")),
)) %>%
select(SeriesName, Frequency, Date, Value)
# Load consumer price index data
cpi_df <- read.csv(file = './data/CPIH Annual Rate All Items 2015=100.csv', header = TRUE)
cpi_source <- 'https://www.ons.gov.uk/economy/grossdomesticproductgdp/timeseries/abmi/pn2'
colnames(cpi_df) <- c('DateChar', 'CPI')
months <- c('JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC')
month_regex <- "(\\d+) (\\w+)"
cpi_df2 = cpi_df %>%
mutate(SeriesName = 'CPI') %>%
mutate(Frequency = case_when(
str_detect(DateChar, 'Q') == TRUE ~ 'Quarter',
(str_match(DateChar, month_regex)[,3] %in% months) == TRUE ~ 'Month',
TRUE ~ 'Annual'
)) %>%
mutate(Value = CPI) %>%
mutate(Date = case_when(
Frequency == 'Quarter' ~ convert_quarterly_dates(DateChar),
Frequency == 'Month' ~ convert_monthly_dates(DateChar, 2, month_regex),
Frequency == 'Annual'  ~ as.POSIXlt(as.Date(paste0(DateChar, '-12-31'), "%Y-%m-%d", "GMT"))
)) %>%
select(SeriesName, Frequency, Date, Value)
# Load unemployment rate data
unemployment_df <- read.csv(file = './data/Unemployment rate (seasonally adjusted).csv', header = TRUE)
unemployment_source <- 'https://www.ons.gov.uk/economy/grossdomesticproductgdp/timeseries/abmi/pn2'
colnames(unemployment_df) <- c('DateChar', 'Unemployment')
month_regex <- "(\\w+)-(\\w+) (\\d+)"
unemployment_df2 = unemployment_df %>%
mutate(SeriesName = 'Unemployment') %>%
mutate(Frequency = 'Month') %>%
mutate(Value = Unemployment) %>%
mutate(Date = convert_monthly_dates(DateChar, 4, month_regex)) %>%
select(SeriesName, Frequency, Date, Value)
# Combine data frames into one
total_df <- bind_rows(gdp_df2, cpi_df2, unemployment_df2)
# Load libraries
library(shiny)
library(stringr)
library(tidyverse)
library(scales)
# Source data
source("src/app_data.R")
# Convert quarterly dates to the right format
convert_quarterly_dates <- function(dates_to_convert) {
quarterly_dates <- c("31-Mar-", "30-Jun-", "30-Sep-", "30-Dec-")
match <- str_match(dates_to_convert, "(\\d+) Q(\\d)")
output <- str_c(quarterly_dates[strtoi(match[,3])], match[,2])
dates <- strptime(output, "%d-%b-%Y", "GMT")
return(dates)
}
# Convert month string to index number
monthToNum <- function(month) {
return(match(month, c('jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep',  'oct', 'nov', 'dec')))
}
# Convert monthly dates to the right format
convert_monthly_dates <- function(dates_to_convert, match_col, match_regex) {
monthly_dates <- c("01-31", "02-28", "03-31", "04-30", "05-31", "06-30", "07-31", "08-31", "09-30", "10-31", "11-30", "12-31")
match <- str_match(dates_to_convert, match_regex)
lowercase_month <- str_to_lower(match[,3])
month_index <- monthToNum(lowercase_month)
output <- str_c(match[,match_col], "-", monthly_dates[month_index])
dates <- strptime(output, "%Y-%m-%d", "GMT")
return(dates)
}
library(stringr)
library(tidyverse)
library(scales)
# Load functions
source("src/functions.R")
# Load GDP data
gdp_df <- read.csv(file = './data/GDP (seasonally adjusted).csv', header = TRUE)
gdp_source <- 'https://www.ons.gov.uk/economy/grossdomesticproductgdp/timeseries/abmi/pn2'
colnames(gdp_df) <- c('DateChar', 'GDP')
gdp_df2 = gdp_df %>%
mutate(SeriesName = 'GDP') %>%
mutate(Frequency = ifelse(str_detect(DateChar, 'Q') == TRUE,'Quarter', 'Annual')) %>%
mutate(Value = GDP) %>%
mutate(Date = case_when(
Frequency == 'Quarter' ~ convert_quarterly_dates(DateChar),
Frequency == 'Annual'  ~ as.POSIXlt(as.Date(paste0(DateChar, '-12-31'), "%Y-%m-%d", "GMT")),
)) %>%
select(SeriesName, Frequency, Date, Value)
# Load consumer price index data
cpi_df <- read.csv(file = './data/CPIH Annual Rate All Items 2015=100.csv', header = TRUE)
cpi_source <- 'https://www.ons.gov.uk/economy/grossdomesticproductgdp/timeseries/abmi/pn2'
colnames(cpi_df) <- c('DateChar', 'CPI')
months <- c('JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC')
month_regex <- "(\\d+) (\\w+)"
cpi_df2 = cpi_df %>%
mutate(SeriesName = 'CPI') %>%
mutate(Frequency = case_when(
str_detect(DateChar, 'Q') == TRUE ~ 'Quarter',
(str_match(DateChar, month_regex)[,3] %in% months) == TRUE ~ 'Month',
TRUE ~ 'Annual'
)) %>%
mutate(Value = CPI) %>%
mutate(Date = case_when(
Frequency == 'Quarter' ~ convert_quarterly_dates(DateChar),
Frequency == 'Month' ~ convert_monthly_dates(DateChar, 2, month_regex),
Frequency == 'Annual'  ~ as.POSIXlt(as.Date(paste0(DateChar, '-12-31'), "%Y-%m-%d", "GMT"))
)) %>%
select(SeriesName, Frequency, Date, Value)
# Load unemployment rate data
unemployment_df <- read.csv(file = './data/Unemployment rate (seasonally adjusted).csv', header = TRUE)
unemployment_source <- 'https://www.ons.gov.uk/economy/grossdomesticproductgdp/timeseries/abmi/pn2'
colnames(unemployment_df) <- c('DateChar', 'Unemployment')
month_regex <- "(\\w+)-(\\w+) (\\d+)"
unemployment_df2 = unemployment_df %>%
mutate(SeriesName = 'Unemployment') %>%
mutate(Frequency = 'Month') %>%
mutate(Value = Unemployment) %>%
mutate(Date = convert_monthly_dates(DateChar, 4, month_regex)) %>%
select(SeriesName, Frequency, Date, Value)
# Combine data frames into one
total_df <- bind_rows(gdp_df2, cpi_df2, unemployment_df2)
View(total_df)
get_frequency_types <- function(seriesName) {
data_df <- filter(total_df, SeriesName == 'GDP')
frequency_types <- distinct(select(data_df, Frequency))
frequency_types <- frequency_types[,1]
return(frequency_types)
}
get_frequency_types('GDP')
get_frequency_types('CPI')
get_frequency_types <- function(seriesName) {
data_df <- filter(total_df, SeriesName == seriesName)
frequency_types <- distinct(select(data_df, Frequency))
frequency_types <- frequency_types[,1]
return(frequency_types)
}
get_frequency_types('CPI')
get_frequency_types('Unemployment')
datasets_df <- filter(total_df, SeriesName == 'GDP')
View(datasets_df)
datasets_df <- filter(datasets_df, Frequency == 'Annual')
View(datasets_df)
#datasets_df <-
datasets_df <- filter(filter(total_df, SeriesName == 'GDP'), Frequency == 'Annual')
View(datasets_df)
#datasets_df <-
datasets_df <- filter(filter(total_df, SeriesName == 'GDP'), Frequency == 'Quarter')
View(datasets_df)
get_series_extremes <- function(seriesName, frequency) {
datasets_df <- filter(filter(total_df, SeriesName == 'GDP'), Frequency == 'Quarter')
min <- head(datasets_df, 1)
max <- tail(datasets_df, 1)
return(bind_rows(min, max))
}
View(get_series_extremes)
get_series_extremes <- function() {
datasets_df <- filter(filter(total_df, SeriesName == 'GDP'), Frequency == 'Quarter')
min <- head(datasets_df, 1)
max <- tail(datasets_df, 1)
return(bind_rows(min, max))
}
print(get_series_extremes())
get_series_extremes <- function(seriesName, frequency) {
datasets_df <- filter(filter(total_df, SeriesName == seriesName), Frequency == frequency)
min <- head(datasets_df, 1)
max <- tail(datasets_df, 1)
return(bind_rows(min, max))
}
print(get_series_extremes('CPI', 'Month'))
print(get_series_extremes('CPI', 'Quarter'))
print(get_series_extremes('CPI', 'Annual'))
print(get_series_extremes('Unemployment', 'Annual'))
print(get_series_extremes('Unemployment', 'Month'))
# Generates a vector of the first and last row of the series name and frequency specified from total_df
get_series_date_extremes <- function(seriesName, frequency) {
datasets_df <- select(filter(filter(total_df, SeriesName == seriesName), Frequency == frequency), Date)
min <- head(datasets_df, 1)
max <- tail(datasets_df, 1)
return(bind_rows(min, max))
}
print(get_series_extremes('Unemployment', 'Month'))
print(get_series_date_extremes('Unemployment', 'Month'))
# Load GDP data
gdp_df <- read.csv(file = './data/GDP (seasonally adjusted).csv', header = TRUE)
colnames(gdp_df) <- c('DateChar', 'GDP')
gdp_df2 = gdp_df %>%
mutate(SeriesName = 'GDP') %>%
mutate(Frequency = ifelse(str_detect(DateChar, 'Q') == TRUE,'Quarter', 'Annual')) %>%
mutate(Value = GDP) %>%
mutate(Date = case_when(
Frequency == 'Quarter' ~ convert_quarterly_dates(DateChar),
Frequency == 'Annual'  ~ as.POSIXlt(as.Date(paste0(DateChar, '-12-31'), "%Y-%m-%d", "GMT")),
)) %>%
mutate(SourceLink = 'https://www.ons.gov.uk/economy/grossdomesticproductgdp/timeseries/abmi/pn2') %>%
mutate(SourceName = 'Office for National Statistics') %>%
select(SeriesName, Frequency, Date, Value, SourceLink, SourceName)
# Load consumer price index data
cpi_df <- read.csv(file = './data/CPIH Annual Rate All Items 2015=100.csv', header = TRUE)
colnames(cpi_df) <- c('DateChar', 'CPI')
months <- c('JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC')
month_regex <- "(\\d+) (\\w+)"
cpi_df2 = cpi_df %>%
mutate(SeriesName = 'CPI') %>%
mutate(Frequency = case_when(
str_detect(DateChar, 'Q') == TRUE ~ 'Quarter',
(str_match(DateChar, month_regex)[,3] %in% months) == TRUE ~ 'Month',
TRUE ~ 'Annual'
)) %>%
mutate(Value = CPI) %>%
mutate(Date = case_when(
Frequency == 'Quarter' ~ convert_quarterly_dates(DateChar),
Frequency == 'Month' ~ convert_monthly_dates(DateChar, 2, month_regex),
Frequency == 'Annual'  ~ as.POSIXlt(as.Date(paste0(DateChar, '-12-31'), "%Y-%m-%d", "GMT"))
)) %>%
mutate(SourceLink = 'https://www.ons.gov.uk/economy/grossdomesticproductgdp/timeseries/abmi/pn2') %>%
mutate(SourceName = 'Office for National Statistics') %>%
select(SeriesName, Frequency, Date, Value, SourceLink, SourceName)
# Load unemployment rate data
unemployment_df <- read.csv(file = './data/Unemployment rate (seasonally adjusted).csv', header = TRUE)
colnames(unemployment_df) <- c('DateChar', 'Unemployment')
month_regex <- "(\\w+)-(\\w+) (\\d+)"
unemployment_df2 = unemployment_df %>%
mutate(SeriesName = 'Unemployment') %>%
mutate(Frequency = 'Month') %>%
mutate(Value = Unemployment) %>%
mutate(Date = convert_monthly_dates(DateChar, 4, month_regex)) %>%
mutate(SourceLink = 'https://www.ons.gov.uk/economy/grossdomesticproductgdp/timeseries/abmi/pn2') %>%
mutate(SourceName = 'Office for National Statistics') %>%
select(SeriesName, Frequency, Date, Value, SourceLink, SourceName)
# Combine data frames into one
total_df <- bind_rows(gdp_df2, cpi_df2, unemployment_df2)
View(total_df)
get_series_sources <- function(seriesName) {
sourceLinks_df <- distinct(select(filter(total_df, SeriesName == seriesName), SourceLink))
sourceNames_df <- distinct(select(filter(total_df, SeriesName == seriesName), SourceName))
return(sourceNames_df)
}
print(get_series_sources('GDP'))
get_series_sources <- function(seriesName) {
sourceLinks_df <- distinct(select(filter(total_df, SeriesName == seriesName), SourceLink))
sourceNames_df <- distinct(select(filter(total_df, SeriesName == seriesName), SourceName))
dataset = c(sourceLinks_df[1], sourceNames_df[1])
return(dataset)
}
print(get_series_sources('GDP'))
print(get_series_sources('GDP')$sourceLink)
print(get_series_sources('GDP')$SourceLink)
# Generates a vector of names of the data sets from total_df
get_series_names <- function() {
datasets_df <- distinct(select(total_df, SeriesName))
dataset <- datasets_df[,1]
return(dataset)
}
print(get_series_names())
# Generates a vector of the first and last row of the date column of the series name and frequency specified from total_df
get_series_date_extremes <- function(seriesName, frequency) {
datasets_df <- select(filter(filter(total_df, SeriesName == seriesName), Frequency == frequency), Date)
min <- head(datasets_df, 1)
max <- tail(datasets_df, 1)
return(bind_rows(min, max))
}
datasets_df <- select(filter(filter(total_df, SeriesName == 'GDP'), Frequency == 'Annual'), Date)
View(datasets_df)
datasets_df <- filter(filter(total_df, SeriesName == 'GDP'), Frequency == 'Annual')
View(datasets_df)
View(datasets_df)
datasets_df <- one_of(filter(filter(total_df, SeriesName == 'GDP'), Frequency == 'Annual'), SeriesName, Frequency, Date, Value)
datasets_df <- select(filter(filter(total_df, SeriesName == 'GDP'), Frequency == 'Annual'), SeriesName:Value)
View(datasets_df)
get_series_data <- function(seriesName, frequency) {
datasets_df <- select(filter(filter(total_df, SeriesName == seriesName), Frequency == frequency), SeriesName:Value)
return(datasets_df)
}
print(get_series_data('CPI', 'Quarter'))
get_series_data <- function(seriesName, frequency) {
datasets_df <- select(filter(filter(total_df, SeriesName == seriesName), Frequency == frequency), Date:Value)
return(datasets_df)
}
print(get_series_data('CPI', 'Quarter'))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Generates a vector of names of the data sets
get_series_names <- function() {
datasets_df <- distinct(select(total_df, SeriesName))
dataset <- datasets_df[,1]
return(dataset)
}
view(get_series_names())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
print(get_series_names()[1])
print(get_series_date_extremes(get_series_names()[1])
blah
print(get_series_date_extremes(get_series_names()[1]))
print(get_series_date_extremes(get_series_names()[1], get_frequency_types(get_series_names()[1]))[1])
print(get_series_date_extremes(get_series_names()[1], get_frequency_types(get_series_names()[1]))[2],)
print(get_series_date_extremes(get_series_names()[1], get_frequency_types(get_series_names()[1]))[1],)
print(get_series_date_extremes(get_series_names()[1], get_frequency_types(get_series_names()[1]))[3],)
print(get_series_date_extremes(get_series_names()[1], get_frequency_types(get_series_names()[1]))[2],)
print(get_series_date_extremes(get_series_names()[1], get_frequency_types(get_series_names()[1]))[1][1])
print(get_series_date_extremes(get_series_names()[1], get_frequency_types(get_series_names()[1]))[1][2])
print(get_series_date_extremes(get_series_names()[1], get_frequency_types(get_series_names()[1]))[1,2])
print(get_series_date_extremes(get_series_names()[1], get_frequency_types(get_series_names()[1]))[1,1])
print(get_series_date_extremes(get_series_names()[1], get_frequency_types(get_series_names()[1]))[1,0])
print(get_series_date_extremes(get_series_names()[1], get_frequency_types(get_series_names()[1]))[1,2])
print(get_series_date_extremes(get_series_names()[1], get_frequency_types(get_series_names()[1]))[1,1])
print(get_series_date_extremes(get_series_names()[1], get_frequency_types(get_series_names()[1]))[2,1])
runApp()
get_series_date_extremes(get_series_names()[1], get_frequency_types(get_series_names()[1]))[1, 1]
get_series_sources(input$trendType)$SourceLink
get_series_sources(get_series_names()[1])$SourceLink
get_series_sources(get_series_names()[1])$SourceName
runApp()
runApp()
runApp()
runApp()
View(total_df)
min <- get_series_date_extremes(get_series_names()[1], get_frequency_types(get_series_names()[1]))[1, 1]
datasets_df <- select(filter(filter(total_df, SeriesName == seriesName), Frequency == frequency), Date)
# Generates a vector of the first and last row of the date column of the series name and frequency specified
get_series_date_extremes <- function(seriesName, frequency) {
datasets_df <- select(filter(filter(total_df, SeriesName == seriesName), Frequency == frequency), Date)
min <- head(datasets_df, 1)
max <- tail(datasets_df, 1)
return(bind_rows(min, max))
}
get_series_date_extremes('GDP', 'Annual')
##############################
# Loads the data into a form the app requires from the total_df
##############################
# Load libraries
library(tidyverse)
get_series_date_extremes('GDP', 'Annual')
min <- get_series_date_extremes(get_series_names()[1], get_frequency_types(get_series_names()[1]))[1, 1]
min <- as.integer(as.Date(get_series_date_extremes(get_series_names()[1], get_frequency_types(get_series_names()[1]))[1, 1], '%Y'))
min <- as.integer(as.Date(get_series_date_extremes(get_series_names()[1], get_frequency_types(get_series_names()[1]))[1, 1]), '%Y')
min <- as.integer(as.Date(get_series_date_extremes(get_series_names()[1], get_frequency_types(get_series_names()[1]))[1, 1]), '%Y')
min <- as.string(as.Date(get_series_date_extremes(get_series_names()[1], get_frequency_types(get_series_names()[1]))[1, 1]), '%Y')
min <- as.integer(toString(as.Date(get_series_date_extremes(get_series_names()[1], get_frequency_types(get_series_names()[1]))[1, 1]), '%Y'))
get_first_series_date_extremes <- function() {
min <- get_series_date_extremes(get_series_names()[1], get_frequency_types(get_series_names()[1]))[1, 1]
max <- get_series_date_extremes(get_series_names()[1], get_frequency_types(get_series_names()[1]))[2, 1]
return(c(min, max))
}
get_first_series_date_extremes()[1]
get_first_series_date_extremes()[2]
shiny::runApp()
runApp()
min <- as.Date(get_series_date_extremes(get_series_names()[1], get_frequency_types(get_series_names()[1]))[1, 1])
min <- as.Date(get_series_date_extremes(get_series_names()[1], get_frequency_types(get_series_names()[1]))[1, 1], 'GMT')
runApp()
runApp()
min <- get_series_date_extremes(get_series_names()[1], get_frequency_types(get_series_names()[1]))[1, 1]
# Generates a data frame of only the dates and values columns of a specified series name and frequency
get_series_data <- function(seriesName, frequency) {
datasets_df <- select(filter(filter(total_df, SeriesName == seriesName), Frequency == frequency), Date:Value)
return(datasets_df)
}
print(get_series_data('GDP', 'Annual'))
runApp()
# Generates a vector of the first and last row of the date column of the series name and frequency specified
get_series_date_extremes <- function(seriesName, frequency) {
datasets_df <- select(filter(filter(total_df, SeriesName == seriesName), Frequency == frequency), Date)
min <- head(datasets_df, 1)
max <- tail(datasets_df, 1)
return(bind_rows(min, max))
}
get_series_date_extremes('GDP', 'Annual')
str(get_series_date_extremes('GDP', 'Annual'))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
